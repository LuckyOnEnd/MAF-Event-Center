@page "/event/edit/{id:guid}"

@inject AuthenticationStateProvider AuthenticationStateProvider

@using MAF_Event_Center.SPA.AuthProviders;
@using MAF_Event_Center.SPA.Models;
@using MAF_Event_Center.SPA.Models.Events;
@using MAF_Event_Center.SPA.Models.UserEvents;
@using MAF_Event_Center.SPA.Services;
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;

@inject IEventService EventService;
@inject IUserService UserService;
@inject NavigationManager nav;

<PageTitle>MAF Event Center</PageTitle>

@if (isUserCanEdit)
{
    <div class="container">
        <EditForm OnValidSubmit="UpdateEvent" Model="eventCreate" class="row g-3">
            <div class="col-md-6">
                <label for="inputEmail4" class="form-label">Name event</label>
                <InputText @bind-Value="eventCreate.Name" class="form-control" id="inputName" />
            </div>
            <div class="col-md-6">
                <label for="inputPassword4" class="form-label">Name game</label>
                <InputSelect class="form-select" aria-label="Default select example" @bind-Value="@eventCreate.GameName">
                    <option selected>Open this select menu</option>
                    @foreach (var x in games)
                    {
                        <option value="@x.Id">@x.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="col-md-6">
                <label for="inputDate" class="form-label">Start Game</label>
                <InputDate @bind-Value="eventCreate.StartEvent" class="form-control" id="inputDate" />
            </div>
            <div class="col-md-6">
                <label for="inputDate" class="form-label">End Game</label>
                <InputDate @bind-Value="eventCreate.EndEvent" class="form-control" id="inputDate" />
            </div>

            <div class="col-md-6">
                <label for="inputDate" class="form-label">End Game</label>
                <InputText @bind-Value="eventCreate.Description" class="form-control" id="description" />
            </div>

            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
}

@code {
    [Parameter]
    public Guid Id { get; set; }
    private Event eventCreate = new Event();
    private bool isUserCanEdit = false;
    private List<Game> games = new List<Game>();

    protected async override Task OnInitializedAsync()
    {
        eventCreate = await EventService.GetEvent(Id);
        games = await EventService.GetGames();
        try
        {
            var user = await UserService.GetCurrentUser();
            if (user.Id == eventCreate.CreatedUser)
            {
                isUserCanEdit = true;
            }
            else
            {
                isUserCanEdit = false;
            }
        }
        catch
        {

            isUserCanEdit = false;
        }
    }

    private async Task UpdateEvent()
    {
        CreateEventDTO createEventDTO = new CreateEventDTO();
        createEventDTO.Id = Id;
        createEventDTO.eventName = eventCreate.Name;
        createEventDTO.StartEvent = eventCreate.StartEvent;
        createEventDTO.EndEvent = eventCreate.EndEvent;
        createEventDTO.Description = eventCreate.Description;
        createEventDTO.gameId = eventCreate.GameId;
        var result = await EventService.UpdateEvent(createEventDTO);

        nav.NavigateTo($"/event/details/{Id}");
    }
}
